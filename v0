<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Modern Dev Quiz</title>
    <!-- Tailwind CSS CDN for easy styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark background */
            color: #e2e8f0; /* Light text */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }
        .game-container {
            background-color: #2d3748; /* Slightly lighter dark background for container */
            border-radius: 1.5rem; /* More rounded corners */
            padding: 2.5rem;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.5);
            max-width: 800px;
            width: 100%;
            text-align: center;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        .button-primary {
            background-color: #63b3ed; /* Blue */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            border: none; /* Remove default button border */
            cursor: pointer;
        }
        .button-primary:hover {
            background-color: #4299e1; /* Darker blue on hover */
            transform: translateY(-2px);
        }
        .button-primary:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        .button-option {
            background-color: #4a5568; /* Dark gray for options */
            color: #e2e8f0;
            padding: 0.75rem 1.25rem;
            border-radius: 0.75rem;
            font-weight: 500;
            transition: background-color 0.3s ease, transform 0.2s ease;
            text-align: left;
            width: 100%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            border: none; /* Remove default button border */
            cursor: pointer;
        }
        .button-option:hover {
            background-color: #63b3ed; /* Blue on hover */
            transform: translateY(-2px);
        }
        .button-option.correct {
            background-color: #48bb78; /* Green for correct */
            pointer-events: none; /* Disable click after answer */
        }
        .button-option.incorrect {
            background-color: #f56565; /* Red for incorrect */
            pointer-events: none; /* Disable click after answer */
        }
        .feedback-message {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 0.75rem;
            font-weight: 600;
            text-align: left;
        }
        .feedback-correct {
            background-color: #2f855a; /* Darker green */
            color: white;
        }
        .feedback-incorrect {
            background-color: #c53030; /* Darker red */
            color: white;
        }
        .explanation-text {
            margin-top: 0.5rem;
            font-size: 0.9rem;
            color: #cbd5e0; /* Lighter gray for explanation */
            text-align: left;
        }
        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #63b3ed; /* Blue for title */
            margin-bottom: 1rem;
        }
        h2 {
            font-size: 1.875rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }
        p {
            font-size: 1.125rem;
            line-height: 1.6;
            margin-bottom: 1rem;
        }
        .question-text {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #a0aec0; /* Medium gray for question */
        }
        .options-container {
            display: grid;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        .progress-bar-container {
            width: 100%;
            background-color: #4a5568;
            border-radius: 0.5rem;
            height: 10px;
            margin-top: 1rem;
            overflow: hidden;
        }
        .progress-bar {
            height: 100%;
            background-color: #63b3ed;
            width: 0%;
            border-radius: 0.5rem;
            transition: width 0.5s ease-in-out;
        }
        .llm-content-area {
            margin-top: 1rem;
            padding: 1rem;
            background-color: #3e4c5b;
            border-radius: 0.75rem;
            text-align: left;
            font-size: 0.95rem;
            color: #e2e8f0;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #63b3ed;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin: 1rem auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>The Modern Dev Quiz</h1>

        <!-- Intro Screen -->
        <div id="intro-screen" class="flex flex-col items-center gap-4">
            <h2>Benvenuto, Apprendista Sviluppatore!</h2>
            <p>Sei pronto per una missione cruciale? Il mondo dello sviluppo software moderno è pieno di segreti, e solo i più saggi possono svelarli. La tua avventura inizia ora, mettendo alla prova le tue conoscenze sui concetti fondamentali che abbiamo esplorato.</p>
            <p>Ogni risposta corretta ti avvicinerà alla padronanza, ma attenzione: le domande diventeranno sempre più complesse. Riuscirai a sbloccare tutti i livelli di comprensione?</p>
            <button id="start-button" class="button-primary">Inizia la Missione!</button>
        </div>

        <!-- Quiz Screen -->
        <div id="quiz-screen" class="hidden flex-col items-center gap-4">
            <div class="progress-bar-container">
                <div id="progress-bar" class="progress-bar"></div>
            </div>
            <p class="text-sm text-gray-400 mt-2">Domanda <span id="current-question-number">1</span> di 10</p>
            <p id="question-text" class="question-text"></p>
            <div id="options-container" class="options-container">
                <!-- Options will be dynamically inserted here -->
            </div>
            <div id="feedback-container" class="hidden">
                <div id="feedback-message" class="feedback-message"></div>
                <p id="explanation-text" class="explanation-text"></p>
                <div class="flex justify-center gap-4 mt-4">
                    <button id="llm-feature-button" class="button-primary hidden"></button>
                </div>
                <div id="llm-content-area" class="llm-content-area hidden"></div>
                <div id="llm-loading-spinner" class="loading-spinner hidden"></div>
                <button id="next-question-button" class="button-primary mt-4 hidden">Prossima Domanda</button>
            </div>
        </div>

        <!-- Result Screen -->
        <div id="result-screen" class="hidden flex-col items-center gap-4">
            <h2>Missione Completata!</h2>
            <p id="final-score-text" class="text-xl font-bold"></p>
            <p>Hai dimostrato una grande comprensione dei concetti chiave dello sviluppo moderno. Continua così!</p>
            <button id="restart-button" class="button-primary">Ricomincia</button>
        </div>
    </div>

    <script>
        // Array of questions with options, correct answer index, explanation, and topic for LLM
        const questions = [
            // Easy Questions
            {
                question: "Cosa fa un JavaScript Runtime?",
                options: [
                    "Compila il codice JavaScript in C++.",
                    "Fornisce l'ambiente completo per l'esecuzione del codice JavaScript.",
                    "È un tipo di database per JavaScript.",
                    "Crea interfacce utente grafiche."
                ],
                correctAnswer: 1,
                explanation: "Un JavaScript Runtime è l'ambiente completo che include tutto il necessario per eseguire il codice JavaScript, come il motore, le API e i meccanismi di gestione delle operazioni.",
                topic: "JavaScript Runtime"
            },
            {
                question: "Qual è il componente principale di un JavaScript Runtime?",
                options: [
                    "Il browser web.",
                    "Il database.",
                    "Il Motore JavaScript (Engine).",
                    "Il sistema operativo."
                ],
                correctAnswer: 2,
                explanation: "Il Motore JavaScript è il cuore del runtime, responsabile della traduzione ed esecuzione del codice JavaScript.",
                topic: "JavaScript Engine"
            },
            {
                question: "A cosa servono principalmente le Variabili d'Ambiente?",
                options: [
                    "Per scrivere codice più velocemente.",
                    "Per fornire informazioni di configurazione dinamiche a un'applicazione senza modificare il codice.",
                    "Per creare animazioni nelle pagine web.",
                    "Per memorizzare dati utente in modo permanente."
                ],
                correctAnswer: 1,
                explanation: "Le Variabili d'Ambiente permettono di configurare un'applicazione dall'esterno, rendendola flessibile e sicura, specialmente per le credenziali.",
                topic: "Variabili d'Ambiente"
            },
            // Medium Questions
            {
                question: "Qual è la differenza fondamentale tra il Call Stack e l'Memory Heap in un JavaScript Runtime?",
                options: [
                    "Il Call Stack memorizza le variabili, l'Heap le funzioni.",
                    "Il Call Stack esegue il codice, l'Heap memorizza gli oggetti e le variabili.",
                    "Il Call Stack è per le operazioni asincrone, l'Heap per quelle sincrone.",
                    "Non c'è differenza, sono la stessa cosa."
                ],
                correctAnswer: 1,
                explanation: "Il Call Stack è dove il codice viene eseguito (gestisce le chiamate di funzione), mentre l'Memory Heap è l'area di memoria dove vengono memorizzati gli oggetti e le variabili del codice.",
                topic: "Call Stack e Memory Heap"
            },
            {
                question: "Perché le Web API sono importanti in un browser JavaScript Runtime?",
                options: [
                    "Rendono JavaScript un linguaggio multi-threaded.",
                    "Permettono a JavaScript di interagire con il DOM e gestire operazioni asincrone.",
                    "Sono usate per la compilazione del codice JavaScript.",
                    "Definiscono la sintassi del linguaggio JavaScript."
                ],
                correctAnswer: 1,
                explanation: "Le Web API (come quelle per il DOM, `fetch`, `setTimeout`) sono fornite dal browser e permettono a JavaScript di interagire con la pagina e di eseguire operazioni asincrone senza bloccare il thread principale.",
                topic: "Web API"
            },
            {
                question: "Cosa significa che JavaScript è 'single-threaded' e come l'Event Loop aiuta a gestire questo?",
                options: [
                    "Significa che JavaScript può eseguire più cose contemporaneamente; l'Event Loop le sincronizza.",
                    "Significa che JavaScript esegue una cosa alla volta; l'Event Loop sposta le callback asincrone nel Call Stack quando è libero.",
                    "Significa che JavaScript può solo leggere i dati; l'Event Loop li scrive.",
                    "JavaScript non è single-threaded."
                ],
                correctAnswer: 1,
                explanation: "Essere 'single-threaded' significa che JavaScript esegue un'operazione alla volta. L'Event Loop, insieme alla Callback Queue, gestisce le operazioni asincrone spostando le loro callback nel Call Stack solo quando questo è libero, evitando blocchi.",
                topic: "Single-threaded e Event Loop"
            },
            {
                question: "Qual è il vantaggio principale di usare le Variabili d'Ambiente per le credenziali sensibili (es. API keys)?",
                options: [
                    "Rendono il codice più facile da leggere.",
                    "Permettono di cambiare le credenziali senza modificare il codice sorgente e migliorano la sicurezza.",
                    "Accelerano l'esecuzione del codice.",
                    "Sono necessarie solo per le applicazioni front-end."
                ],
                correctAnswer: 1,
                explanation: "Il vantaggio principale è la sicurezza, poiché le credenziali non sono 'hardcoded' nel codice sorgente e possono essere gestite in modo più sicuro, oltre alla flessibilità di cambiarle facilmente.",
                topic: "Sicurezza delle Variabili d'Ambiente"
            },
            // Hard Questions
            {
                question: "Spiega la relazione tra un'API e le Variabili d'Ambiente.",
                options: [
                    "Sono la stessa cosa, solo con nomi diversi.",
                    "Le API sono i contratti di comunicazione, mentre le Variabili d'Ambiente spesso contengono le credenziali usate per accedere a quelle API.",
                    "Le Variabili d'Ambiente definiscono il comportamento di un'API.",
                    "Le API sono sempre configurate tramite Variabili d'Ambiente."
                ],
                correctAnswer: 1,
                explanation: "Le API definiscono come i sistemi comunicano. Le Variabili d'Ambiente sono usate per fornire dinamicamente le credenziali (es. chiavi API) o altre configurazioni necessarie per autenticarsi e interagire con un'API.",
                topic: "Relazione API e Variabili d'Ambiente"
            },
            {
                question: "Qual è lo scopo principale del Model Context Protocol (MCP)?",
                options: [
                    "Sostituire completamente tutte le API esistenti.",
                    "Standardizzare il modo in cui i modelli di linguaggio (LLM) e gli agenti AI accedono a dati e strumenti esterni.",
                    "Creare nuove lingue di programmazione per l'AI.",
                    "Ottimizzare la velocità di esecuzione dei JavaScript Runtime."
                ],
                correctAnswer: 1,
                explanation: "MCP è progettato per standardizzare l'integrazione di dati e strumenti esterni per gli LLM e gli agenti AI, consentendo loro di accedere a contesto in tempo reale e capacità di azione al di fuori dei loro dati di addestramento.",
                topic: "Scopo del Model Context Protocol (MCP)"
            },
            {
                question: "Come un MCP Server può interagire con API esterne e come le Variabili d'Ambiente si inseriscono in questo scenario?",
                options: [
                    "Un MCP Server non può interagire con API esterne; usa solo dati interni.",
                    "Un MCP Server usa API esterne per ottenere dati o eseguire azioni, e le Variabili d'Ambiente forniscono le credenziali necessarie per queste API.",
                    "Le Variabili d'Ambiente sono usate per definire il protocollo di comunicazione di un MCP Server, non le sue interazioni con API esterne.",
                    "Le API esterne sono direttamente integrate negli LLM, non tramite un MCP Server."
                ],
                correctAnswer: 1,
                explanation: "Un MCP Server agisce come intermediario: può chiamare API esterne (es. un'API meteo) per recuperare dati o eseguire azioni, e le credenziali per queste API esterne sono tipicamente gestite tramite Variabili d'Ambiente per sicurezza e flessibilità.",
                topic: "Interazione MCP Server con API e Variabili d'Ambiente"
            }
        ];

        // Game state variables
        let currentQuestionIndex = 0;
        let score = 0;
        let answeredCorrectly = false; // Flag to check if the current question was answered correctly

        // DOM elements
        const introScreen = document.getElementById('intro-screen');
        const quizScreen = document.getElementById('quiz-screen');
        const resultScreen = document.getElementById('result-screen');
        const startButton = document.getElementById('start-button');
        const questionText = document.getElementById('question-text');
        const optionsContainer = document.getElementById('options-container');
        const feedbackContainer = document.getElementById('feedback-container');
        const feedbackMessage = document.getElementById('feedback-message');
        const explanationText = document.getElementById('explanation-text');
        const llmFeatureButton = document.getElementById('llm-feature-button');
        const llmContentArea = document.getElementById('llm-content-area');
        const llmLoadingSpinner = document.getElementById('llm-loading-spinner');
        const nextQuestionButton = document.getElementById('next-question-button');
        const finalScoreText = document.getElementById('final-score-text');
        const restartButton = document.getElementById('restart-button');
        const progressBar = document.getElementById('progress-bar');
        const currentQuestionNumber = document.getElementById('current-question-number');

        // Event Listeners
        startButton.addEventListener('click', startGame);
        nextQuestionButton.addEventListener('click', nextQuestion);
        restartButton.addEventListener('click', resetGame);
        llmFeatureButton.addEventListener('click', handleLlmFeature);

        // Function to start the game
        function startGame() {
            introScreen.classList.add('hidden');
            quizScreen.classList.remove('hidden');
            resetGame(); // Ensure game state is reset
        }

        // Function to display a question
        function showQuestion() {
            // Reset feedback area
            feedbackContainer.classList.add('hidden');
            nextQuestionButton.classList.add('hidden');
            llmFeatureButton.classList.add('hidden');
            llmContentArea.classList.add('hidden');
            llmContentArea.textContent = ''; // Clear LLM content
            llmLoadingSpinner.classList.add('hidden'); // Hide spinner
            feedbackMessage.textContent = '';
            explanationText.textContent = '';
            answeredCorrectly = false; // Reset flag for new question

            // Update progress bar
            const progress = ((currentQuestionIndex) / questions.length) * 100;
            progressBar.style.width = `${progress}%`;
            currentQuestionNumber.textContent = currentQuestionIndex + 1;

            const question = questions[currentQuestionIndex];
            questionText.textContent = question.question;
            optionsContainer.innerHTML = ''; // Clear previous options

            question.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.textContent = option;
                button.classList.add('button-option');
                button.addEventListener('click', () => checkAnswer(index));
                optionsContainer.appendChild(button);
            });
        }

        // Function to check the selected answer
        function checkAnswer(selectedIndex) {
            const question = questions[currentQuestionIndex];
            const allOptions = optionsContainer.querySelectorAll('.button-option');

            // Disable all options after selection
            allOptions.forEach(button => button.style.pointerEvents = 'none');

            feedbackContainer.classList.remove('hidden');
            nextQuestionButton.classList.remove('hidden');
            llmFeatureButton.classList.remove('hidden'); // Show LLM button

            if (selectedIndex === question.correctAnswer) {
                score++;
                feedbackMessage.textContent = "Corretto! Ottimo lavoro.";
                feedbackMessage.classList.remove('feedback-incorrect');
                feedbackMessage.classList.add('feedback-correct');
                allOptions[selectedIndex].classList.add('correct');
                answeredCorrectly = true;
                llmFeatureButton.textContent = "✨ Genera Domanda Bonus";
                llmFeatureButton.dataset.feature = "bonus"; // Custom data attribute to identify feature
            } else {
                feedbackMessage.textContent = "Sbagliato. Rivediamo questo concetto:";
                feedbackMessage.classList.remove('feedback-correct');
                feedbackMessage.classList.add('feedback-incorrect');
                explanationText.textContent = question.explanation;
                allOptions[selectedIndex].classList.add('incorrect');
                allOptions[question.correctAnswer].classList.add('correct'); // Highlight correct answer
                answeredCorrectly = false;
                llmFeatureButton.textContent = "✨ Spiegazione Avanzata";
                llmFeatureButton.dataset.feature = "advanced_explanation"; // Custom data attribute
            }
        }

        // Handles the click on the LLM feature button
        async function handleLlmFeature() {
            const featureType = llmFeatureButton.dataset.feature;
            const currentQuestion = questions[currentQuestionIndex];

            llmContentArea.classList.add('hidden'); // Hide previous content
            llmContentArea.textContent = ''; // Clear content
            llmLoadingSpinner.classList.remove('hidden'); // Show spinner
            llmFeatureButton.disabled = true; // Disable button during loading

            try {
                let prompt = "";
                if (featureType === "advanced_explanation") {
                    prompt = `Fornisci una spiegazione più dettagliata e approfondita del seguente concetto, basandoti sulla domanda e sulla spiegazione fornita:
                    Domanda: "${currentQuestion.question}"
                    Spiegazione base: "${currentQuestion.explanation}"
                    Spiegazione avanzata:`;
                } else if (featureType === "bonus") {
                    prompt = `Genera una breve domanda bonus aperta (non a scelta multipla) sul tema "${currentQuestion.topic}". La domanda dovrebbe stimolare la riflessione e approfondire il concetto, senza richiedere una risposta specifica da un elenco.`;
                }

                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = ""; // Canvas will automatically provide the API key at runtime
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    llmContentArea.textContent = text;
                    llmContentArea.classList.remove('hidden');
                } else {
                    llmContentArea.textContent = "Spiacente, non sono riuscito a generare il contenuto. Riprova.";
                    llmContentArea.classList.remove('hidden');
                }
            } catch (error) {
                console.error("Errore durante la chiamata a Gemini API:", error);
                llmContentArea.textContent = "Si è verificato un errore durante la generazione. Controlla la console per i dettagli.";
                llmContentArea.classList.remove('hidden');
            } finally {
                llmLoadingSpinner.classList.add('hidden'); // Hide spinner
                llmFeatureButton.disabled = false; // Re-enable button
            }
        }

        // Function to move to the next question or show results
        function nextQuestion() {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                showQuestion();
            } else {
                showResults();
            }
        }

        // Function to show final results
        function showResults() {
            quizScreen.classList.add('hidden');
            resultScreen.classList.remove('hidden');
            finalScoreText.textContent = `Hai risposto correttamente a ${score} domande su ${questions.length}!`;
            progressBar.style.width = `100%`; // Ensure progress bar is full at the end
        }

        // Function to reset the game
        function resetGame() {
            currentQuestionIndex = 0;
            score = 0;
            quizScreen.classList.remove('hidden');
            resultScreen.classList.add('hidden');
            introScreen.classList.add('hidden'); // Ensure intro screen is hidden
            showQuestion();
        }

        // Initial call to show the intro screen
        window.onload = function() {
            introScreen.classList.remove('hidden');
            quizScreen.classList.add('hidden');
            resultScreen.classList.add('hidden');
        };

    </script>
</body>
</html>
